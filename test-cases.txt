// cpp

  struct TestCase {
    vector<int> nums;
    int limit;
    vector<int> out;
  };

  vector<TestCase> testCases = {{{1, 5, 3, 9, 8}, 2, {1, 3, 5, 8, 9}},
                                {
                                    {1, 7, 6, 18, 2, 1},
                                    3,
                                    {1, 6, 7, 18, 1, 2},
                                },
                                {{1, 7, 28, 19, 10}, 3, {1, 7, 28, 19, 10}}

  };

  Solution obj = Solution{};

  for (auto tc : testCases) {
    auto answer = obj.lexicographicallySmallestArray(tc.nums, tc.limit);
    auto passed = answer == tc.out;
    fmt::println("{} | {} | {} {} {}", passed, answer, tc.nums, tc.limit,
                 tc.out);
  }

--------------------------------------------------------------------------------

  struct TestCase {
    int numCourses;
    vector<vector<int>> prerequisites, queries;
    vector<bool> out;
  };

  vector<TestCase> testCases = {
      {2, {{1, 0}}, {{0, 1}, {1, 0}}, {false, true}},
      {2, {}, {{1, 0}, {0, 1}}, {false, false}},
      {3, {{1, 2}, {1, 0}, {2, 0}}, {{1, 0}, {1, 2}}, {true, true}}};

  Solution obj = Solution{};

  for (auto tc : testCases) {
    auto answer =
        obj.checkIfPrerequisite(tc.numCourses, tc.prerequisites, tc.queries);
    auto passed = answer == tc.out;
    fmt::println("{} | {} | {} {} {} {}", passed, answer, tc.numCourses,
                 tc.prerequisites, tc.queries, tc.out);
  }

--------------------------------------------------------------------------------
